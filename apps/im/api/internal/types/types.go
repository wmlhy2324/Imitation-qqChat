// Code generated by goctl. DO NOT EDIT.
package types

type ChatLog struct {
	Id             string `json:"id"`
	ConversationId string `json:"conversationId"`
	SendId         string `json:"sendId"`
	RecvId         string `json:"recvId"`
	MsgType        int32  `json:"msgType"`
	MsgContent     string `json:"msgContent"`
	ChatType       int32  `json:"chatType"`
	SendTime       int64  `json:"SendTime"`
}

type ChatLogReq struct {
	ConversationId string `json:"conversationId"`
	StartSendTime  int64  `json:"startSendTime,omitempty"`
	EndSendTime    int64  `json:"endSendTime,omitempty"`
	Count          int64  `json:"count,omitempty"`
}

type ChatLogResp struct {
	List []*ChatLog `json:"list"`
}

type Conversation struct {
	ConversationId string `json:"conversationId"`
	ChatType       int32  `json:"ChatType"`
	TargetId       string `json:"targetId"`
	IsShow         bool   `json:"isShow"`
	Seq            int64  `json:"seq"`
	Read           int32  `json:"read"`
	Total          int32  `json:"total"`
	Unread         int32  `json:"unread"`
	Name           string `json:"name"`        // 会话名称（好友昵称或群名称）
	Avatar         string `json:"avatar"`      // 会话头像（好友头像或群头像）
	MemberCount    int32  `json:"memberCount"` // 群成员数量（仅群聊时有效）
}

type GetChatLogReadRecordsReq struct {
	MsgId string `json:"msgId"`
}

type GetChatLogReadRecordsResp struct {
	Reads   []string `json:"reads"`
	UnReads []string `json:"unReads"`
}

type GetConversationsReq struct {
}

type GetConversationsResp struct {
	UserId           string                   `json:"userId"`
	ConversationList map[string]*Conversation `json:"conversationList"`
}

type PutConversationsReq struct {
	ConversationList map[string]*Conversation `json:"conversationList"`
}

type PutConversationsResp struct {
}

type SetUpUserConversationReq struct {
	SendId   string `json:"sendId,omitempty"`
	RecvId   string `json:"recvId,omitempty"`
	ChatType int32  `json:"ChatType,omitempty"`
}

type SetUpUserConversationResp struct {
}
